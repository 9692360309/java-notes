
1.To find each digit in the string "shdkjalsihajoldkhj" using Java 8 Stream API, you can filter out the digits using the chars() method and check if each character is a digit.

Hereâ€™s how you can do it:

java
Copy code
String str = "shdkjalsihajoldkhj";

str.chars() // convert string to IntStream
    .filter(Character::isDigit) // filter only the digits
    .mapToObj(c -> (char) c) // convert int to char
    .forEach(System.out::println); // print each digit

2. Add 1000 to every salary using Stream API:
java
Copy code
employees.stream()
    .map(emp -> emp.setSalary(emp.getSalary() + 1000))
    .forEach(System.out::println);
4. Remove duplicate values from an array using Stream API:
java
Copy code
Integer[] numbers = {1, 2, 3, 2, 4, 3};
Arrays.stream(numbers)
    .distinct()
    .forEach(System.out::println);
5. If two hash codes return the same value:
If two objects have the same hash code, they may not necessarily be equal. In such cases, the equals() method is used to check for equality. Hash collision occurs, but the actual content comparison will depend on the equals() method.

6. Get minimum and maximum number from a list using Stream API:
java
Copy code
List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
int min = numbers.stream().min(Integer::compare).get();
int max = numbers.stream().max(Integer::compare).get();
7. Get employee salary in descending order using Stream API:
java
Copy code
employees.stream()
    .sorted((e1, e2) -> e2.getSalary().compareTo(e1.getSalary()))
    .forEach(System.out::println);
8. Largest number in an array using Stream API:
java
Copy code
Integer[] numbers = {1, 2, 3, 4, 5};
int largest = Arrays.stream(numbers)
    .max(Integer::compare).get();
9. Second largest number in an array using Stream API:
java
Copy code
Integer[] numbers = {1, 2, 3, 4, 5};
int secondLargest = Arrays.stream(numbers)
    .sorted(Comparator.reverseOrder())
    .distinct()
    .skip(1)
    .findFirst()
    .get();
10. Word count using Stream API:
java
Copy code
String sentence = "This is a sentence with words";
long wordCount = Arrays.stream(sentence.split(" "))
    .count();
11. SQL query to get the second-largest salary:
sql
Copy code
SELECT MAX(salary) 
FROM employee 
WHERE salary NOT IN (SELECT MAX(salary) FROM employee);
12. Java 8 Stream API operations with two arguments:
java
Copy code
Stream.of(1, 2, 3, 4, 5)
    .map(i -> i * 2)      // perform an operation on each element
    .filter(i -> i > 5)   // filter based on a condition
    .forEach(System.out::println); // print each element
13. Swap two numbers using Stream API:
java
Copy code
int[] numbers = {5, 10};
IntStream.of(numbers).forEach(System.out::println);
numbers[0] = numbers[0] + numbers[1];
numbers[1] = numbers[0] - numbers[1];
numbers[0] = numbers[0] - numbers[1];
IntStream.of(numbers).forEach(System.out::println);
14. Check palindrome number using Stream API:
java
Copy code
int number = 121;
boolean isPalindrome = IntStream.range(0, String.valueOf(number).length())
    .allMatch(i -> String.valueOf(number).charAt(i) == 
                   String.valueOf(number).charAt(String.valueOf(number).length() - i - 1));
15. How to validate JWT Token in Rest API:
JWT (JSON Web Token) validation involves:

Extracting the token from the Authorization header.
Verifying the signature using the secret key.
Checking claims (like expiration date, issuer).
If the token is valid, allow access; otherwise, deny it.
Example with Java:

java
Copy code
public boolean validateToken(String token) {
    try {
        Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token);
        return true;
    } catch (JwtException | IllegalArgumentException e) {
        throw new CustomJwtException("Invalid JWT token");
    }
}
16. Merge two unsorted arrays into a single sorted array using Stream API:
java
Copy code
Integer[] array1 = {3, 5, 7};
Integer[] array2 = {1, 4, 9};
Integer[] merged = Stream.concat(Arrays.stream(array1), Arrays.stream(array2))
    .sorted()
    .toArray(Integer[]::new);
17. Separate odd and even numbers using Stream API:
java
Copy code
List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
Map<Boolean, List<Integer>> partitioned = numbers.stream()
    .collect(Collectors.partitioningBy(n -> n % 2 == 0));
18. Check if two strings are anagrams using Stream API:
java
Copy code
String str1 = "listen";
String str2 = "silent";
boolean areAnagrams = Arrays.equals(
    str1.chars().sorted().toArray(),
    str2.chars().sorted().toArray());
19. Sum of all digits of a number using Stream API:
java
Copy code
int number = 12345;
int sum = String.valueOf(number).chars()
    .map(Character::getNumericValue)
    .sum();
20. Sort a list of strings by length using Stream API:
java
Copy code
List<String> strings = Arrays.asList("apple", "banana", "cherry");
strings.stream()
    .sorted(Comparator.comparingInt(String::length))
    .forEach(System.out::println);
21. Find common elements between two arrays:
java
Copy code
Integer[] array1 = {1, 2, 3};
Integer[] array2 = {2, 3, 4};
List<Integer> common = Arrays.stream(array1)
    .filter(Arrays.asList(array2)::contains)
    .collect(Collectors.toList());
22. Reverse each word in a string using Stream API:
java
Copy code
String sentence = "hello world";
String reversed = Arrays.stream(sentence.split(" "))
    .map(word -> new StringBuilder(word).reverse().toString())
    .collect(Collectors.joining(" "));
23. Palindrome program using Java 8 streams:
java
Copy code
String word = "madam";
boolean isPalindrome = IntStream.range(0, word.length() / 2)
    .allMatch(i -> word.charAt(i) == word.charAt(word.length() - i - 1));
24. Sum of first 10 natural numbers using Stream API:
java
Copy code
int sum = IntStream.rangeClosed(1, 10).sum();
25. Find strings that start with a number using Stream API:
java
Copy code
List<String> strings = Arrays.asList("1apple", "banana", "2cherry");
strings.stream()
    .filter(s -> Character.isDigit(s.charAt(0)))
    .forEach(System.out::println);
26. Fibonacci series:
java
Copy code
Stream.iterate(new int[]{0, 1}, fib -> new int[]{fib[1], fib[0] + fib[1]})
    .limit(10)
    .map(fib -> fib[0])
    .forEach(System.out::println);
27. Find the age of a person in years given their birthday:
java
Copy code
LocalDate birthDate = LocalDate.of(1990, Month.JANUARY, 1);
long age = ChronoUnit.YEARS.between(birthDate, LocalDate.now());
28. Remove duplicates from a string:
java
Copy code
String input = "programming";
String result = input.chars()
    .distinct()
    .mapToObj(c -> String.valueOf((char)c))
    .collect(Collectors.joining());
What is Microservice in Java and how to use it in a project:
A microservice is a small, independent, loosely coupled service that performs a single business function. In Java, microservices are typically built using frameworks like Spring Boot and can be deployed independently. Each microservice communicates via lightweight protocols like HTTP and handles its own database and business logic.

For a project, microservices can be used to modularize large applications into smaller, manageable components, each responsible for specific functionalities like user authentication, transaction management, etc. These services interact using RESTful APIs or messaging systems like Kafka.










